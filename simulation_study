library(Deriv)

library(greybox)

library(betafunctions)

library(extraDistr)

library(truncnorm)


# utility functions

rescale <- function(x,lb=0,ub=1){(x-lb)/(ub-lb)}   #linearly rescale into [lb,ub]
rescale_inv <- function(x,lb=0,ub=1){lb+(ub-lb)*x} #inverse of rescale
power <- function(x,a){x^a}

fyA_case1 <- function(m,y,s,lb=0,ub=1,return.log=FALSE)
{ #h() function --see paper
  
  y <- rescale(y,lb,ub)
  
  m <- rescale(m,lb,ub)
  
  if(return.log==TRUE){
    
    return(log(1/beta(y*s,s-s*y) * (m/(1-m))^(s*y)))
    
  }else{
    
    return(1/beta(y*s,s-s*y) * (m/(1-m))^(s*y))
    
  }
}


dpi_y_case1 <- function(fY,pars,x,m,s,lb=0,ub=1,...)
{ #conditional posterior y|thetay,.. --case 1
  
  Z <- integrate(function(x)fyA_case1(m,x,s,lb,ub)*fY(x,pars),lb+sign(lb)*1e-3,ub-sign(ub)*1e-3)$val
  
  fx <- (fyA_case1(m,x,s,lb,ub)*fY(x,pars))/Z
  
  return(fx)
}



dpi_y_approx_case1A <- function(fY,pars,m,s,lambda0=0.5,sigma0=10.0,lb=0,ub=1,eps=1e-9,print.out=FALSE,
                                maxLimit=300,debugOn=FALSE,trials=500,...){ #derivative approximation of pi(y|thetay,..) --case 1
  
  lambda <-lambda0
  
  sigma <- sigma0
  
  y <- 1.99
  
  k <- 0
  
  lnFy <-  function(y,pars){log(fY(y,pars))}
  
  d1lnFy <- Deriv::Deriv(lnFy,"y",nderiv=1)
  
  d2lnFy <- Deriv::Deriv(lnFy,"y",nderiv=2)
  
  m <- rescale(m,lb,ub)
  
  # cat("m: ", m, "s: ", s, "y: ",y, "\n")
  # 
  # print("lambda:")
  # 
  # print(lambda)
  
  while((abs(y/lambda-1))>eps){
    
    k <- k+1
    
    y <- lambda
    
    # checking violating the limits
    
    if(abs(s*y)>maxLimit || abs(s - s*y)>maxLimit)
    {
      
      lambda <- NA
      
      sigma <- NA
      
      break
    }
    
    # checking too many trials
    
    if(k > trials)
    {
      if(debugOn)
      {
        cat("Too many trials! \n")
      }
      
      lambda <- NA
      
      sigma <- NA
      
      break
    }
    
    K1 <- d1lnFy(rescale_inv(y,lb,ub),pars) + s*log(m/(1 - m)) + s*(-pracma::psi(0,s*y) + pracma::psi(0,s - s*y))
    
    K2 <-  d2lnFy(rescale_inv(y,lb,ub),pars) - power(s,2)*(pracma::psi(1,s*y) + pracma::psi(1,s - s*y))
    
    lambda <- (1 + y*(-2 + K1 + sigma - K1*y))/sigma
    
    sigma <-  (1 - (-1 + y)*y*(-2 + K2*(-1 + y)*y))/(lambda - 2*lambda*y + power(y,2))
    
    if(print.out){print(c(k,lambda,rescale_inv(lambda,lb,ub),sigma))}
    
    if(is.na(lambda)||is.na(sigma)){break}
    
  }
  
  if(lambda<0||lambda>1||sigma<0||is.na(lambda)||is.na(sigma)){
    
    #warning("No solution found. Returning observed values :-(")
    #return(c(rescale_inv(m,lb,ub),s))
    
    return(c(NA,NA))
    
  } else {
    
    return(c(rescale_inv(lambda,lb,ub),sigma))
    
  }
}



dpi_y_approx_case1Deb <- function(fY,pars,m,s,lambda0,sigma0,lb=0,ub=1,eps=1e-9,
                                  print.out=FALSE,debugOn=TRUE,maxLimit=300,trials=600,...){ #derivative approximation of pi(y|thetay,..) --case 1
  
  lambda <-lambda0
  
  sigma <- sigma0
  
  y <- lambda
  
  k <- 0
  
  lnFy <-  function(y,pars){log(fY(y,pars))}
  
  d1lnFy <- Deriv::Deriv(lnFy,"y",nderiv=1)
  
  d2lnFy <- Deriv::Deriv(lnFy,"y",nderiv=2)
  
  m <- rescale(m,lb,ub)
  
  if(debugOn)
  {
    cat("\n", "m: ", m, "s: ", s, "y: ",y, "\n")
    
    cat("pars: \n")
    
    print(pars)
    
    cat("lambda0: ", lambda0, "sigma0: ", sigma0, "\n")
  }
  
  doLoop <- TRUE
  
  while(doLoop){
    
    k <- k+1
    
    y <- lambda
    
    if(debugOn)
    {
      
      cat("k: ", k, "m/(1 - m): ", m/(1 - m), "s*y: ", s*y, "s - s*y: ", s - s*y, "\n")
    }
    
    # checking violating the limits
    
    if(abs(s*y)>maxLimit || abs(s - s*y)>maxLimit)
    {
      if(debugOn)
      {
        cat("Outside the limits! \n")
      }
      
      lambda <- NA
      
      sigma <- NA
      
      break
    }
    
    # checking too many trials
    
    if(k > trials)
    {
      if(debugOn)
      {
        cat("Too many trials! \n")
      }
      
      lambda <- NA
      
      sigma <- NA
      
      break
    }
    
    K1 <- d1lnFy(rescale_inv(y,lb,ub),pars) + s*log(m/(1 - m)) + s*(-pracma::psi(0,s*y) + pracma::psi(0,s - s*y))
    
    K2 <-  d2lnFy(rescale_inv(y,lb,ub),pars) - power(s,2)*(pracma::psi(1,s*y) + pracma::psi(1,s - s*y))
    
    if(debugOn)
    {
      cat("d1lnFy: ", d1lnFy(rescale_inv(y,lb,ub),pars), "d2lnFy: ", d2lnFy(rescale_inv(y,lb,ub),pars), "K1: ",K1, "K2: ", K2, "\n")
    }
    
    lambda <- (1 + y*(-2 + K1 + sigma - K1*y))/sigma
    
    sigma <-  (1 - (-1 + y)*y*(-2 + K2*(-1 + y)*y))/(lambda - 2*lambda*y + power(y,2))
    
    if(debugOn)
    {
      cat("lambda: ",lambda, "sigma: ", sigma, "\n")
    }
    
    
    
    if(print.out){print(c(k,lambda,rescale_inv(lambda,lb,ub),sigma))}
    
    if(is.na(lambda)||is.na(sigma)){break}
    
    if((abs(y/lambda-1))<eps)
    {
      doLoop <- FALSE
    }
    
  }
  
  if(lambda<0||lambda>1||sigma<0||is.na(lambda)||is.na(sigma)){
    
    #warning("No solution found. Returning observed values :-(")
    #return(c(rescale_inv(m,lb,ub),s))
    
    if(debugOn)
    {
      cat("No solution found. Returning observed values\n")
    }
    
    return(c(NA,NA))
    
  } else {
    
    return(c(rescale_inv(lambda,lb,ub),sigma))
    
  }
}




# find parameters for the approximation

FindApproxParam <- function(n,fY,randomFY,paramFY,paramGa,print.out=TRUE,lambda0Lim=c(0.1,0.9),sigma0Lim=c(2,28),lb=0,
                            ub=1,limit=0.1,debugOn=FALSE,...)
{
  # output matrix 
  
  # print("paramFY: ")
  # print(paramFY)
  # 
  # print("paramGa: ")
  # print(paramGa)
  
  output <- matrix(NA,nrow=n,ncol = 5)
  
  colnames(output) <- c("y","s","m","lambda","sigma")
  
  # generation of the Bayesian model (fY, then s, and m conditionally)
  
  y <-  do.call(randomFY,args = append(list(n=n),paramFY))
  
  s <-  rgamma(n=n,unlist(paramGa))
  
  # m <- mapply(function(i)rbeta(1,y[i]*s[i],s[i]-s[i]*y[i]),1:n)
  
  m <- mapply(function(i)rBeta.4P(1,l=lb,u=ub,alpha=y[i]*s[i],beta=s[i]-s[i]*y[i]),1:n)
  
  m[m>(1-limit)] <- 1-limit
  
  m[m<limit] <- limit
  
  # put parameters to the output matrix
  
  output[,"y"] <- y
  
  output[,"s"] <- s
  
  output[,"m"] <- m
  
  if(debugOn)
  {
    print(output)
  }
  
  pb <- utils::txtProgressBar(min = 0, max = n, initial = 1, style = 3, char = "=")
  
  for (i in 1:n) {
    
    cond <- TRUE
    
    k <- 0
    
    while(cond){
      
      k <- k+1
      
      out <- dpi_y_approx_case1A(fY=fY,pars=paramFY,m=output[i,"m"],s=output[i,"s"],lambda0 = runif(1,lambda0Lim[1],lambda0Lim[2]),
                                 sigma0 = runif(1,sigma0Lim[1],sigma0Lim[2]),
                                 lb=lb,ub=ub,print.out = print.out,debugOn = debugOn,...)
      
      cond <- anyNA(out)
      
    }
    
    # put approx parameters to the output matrix
    
    output[i,"lambda"] <- out[1]
    
    output[i,"sigma"] <- out[2]
    
    utils::setTxtProgressBar(pb,i)
    
  }
  
  close(pb)
  
  
  return(output)
  
  
}






# find parameters for the approximation with limit on trials

FindApproxParamLimit <- function(n,fY,randomFY,paramFY,paramGa,print.out=TRUE,lambda0Lim=c(0.1,0.9),sigma0Lim=c(2,28),lb=0,
                                 ub=1,limit=0.1,debugOn=FALSE,trials=300,...)
{
  # output matrix 
  
  # print("paramFY: ")
  # print(paramFY)
  # 
  # print("paramGa: ")
  # print(paramGa)
  
  output <- matrix(NA,nrow=n,ncol = 5)
  
  colnames(output) <- c("y","s","m","lambda","sigma")
  
  # generation of the Bayesian model (fY, then s, and m conditionally)
  
  y <-  do.call(randomFY,args = append(list(n=n),paramFY))
  
  s <-  rgamma(n=n,unlist(paramGa))
  
  # m <- mapply(function(i)rbeta(1,y[i]*s[i],s[i]-s[i]*y[i]),1:n)
  
  m <- mapply(function(i)rBeta.4P(1,l=lb,u=ub,alpha=y[i]*s[i],beta=s[i]-s[i]*y[i]),1:n)
  
  m[m>(1-limit)] <- 1-limit
  
  m[m<limit] <- limit
  
  # put parameters to the output matrix
  
  output[,"y"] <- y
  
  output[,"s"] <- s
  
  output[,"m"] <- m
  
  if(debugOn)
  {
    print(output)
  }
  
  pb <- utils::txtProgressBar(min = 0, max = n, initial = 1, style = 3, char = "=")
  
  for (i in 1:n) {
    
    cond <- TRUE
    
    k <- 0
    
    while(cond){
      
      k <- k+1
      
      out <- dpi_y_approx_case1A(fY=fY,pars=paramFY,m=output[i,"m"],s=output[i,"s"],lambda0 = runif(1,lambda0Lim[1],lambda0Lim[2]),
                                 sigma0 = runif(1,sigma0Lim[1],sigma0Lim[2]),
                                 lb=lb,ub=ub,print.out = print.out,debugOn = debugOn,...)
      
      cond <- anyNA(out)
      
      cat(" k: ", k)
      
      if(k > trials)
      {
        out <- c(NA,NA)
        
        print("Too many trials")
        
        break
      }
      
    }
    
    # put approx parameters to the output matrix
    
    output[i,"lambda"] <- out[1]
    
    output[i,"sigma"] <- out[2]
    
    utils::setTxtProgressBar(pb,i)
    
  }
  
  close(pb)
  
  
  return(output)
  
  
}


# function to calculate the distances between the approx and "true" function for the single set of the parameters

CalculateDistances <- function(fY,pars,m,s,lambda,sigma,lb=0,ub=1,...)
{
  
  if(is.na(lambda) || is.na(sigma))
  {
    
    output <- list(totalVar=NA,hellDist=NA)
    
  } else {
    
    # difference for total variation
    
    f1 <- function(x)abs(dpi_y_case1 (fY,pars=pars,x,m=m,s=s,lb=lb,ub=ub,...)-
                           dBeta.4P(x,l=lb,u=ub,alpha=lambda*sigma,beta=sigma-lambda*sigma))
    
    totalVar <- 0.5*integrate(f1,lb,ub)$val
    
    # difference for Hellinger distance
    
    f2 <- function(x){((dpi_y_case1 (fY,pars=pars,x,m=m,s=s,lb=lb,ub=ub,...))^(1/2)-
                         (dBeta.4P(x,l=lb,u=ub,alpha=lambda*sigma,beta=sigma-lambda*sigma))^(1/2))^2}
    
    hellDist <- (integrate(f2,lb,ub)$val)^(1/2)
    
    output <- list(totalVar=totalVar,hellDist=hellDist)
    
  }
  
  
  
  return(output)
  
}


# function to calculate the distances between the approx and "true" function for the whole matrix of the parameters

CalculateDistancesMatrix <- function(fY,pars,paramMatrix,lb=0,ub=1,...)
{
  # two new columns in the matrix
  
  n <- nrow(paramMatrix)
  
  emptyCol <- matrix(NA,nrow=n,ncol = 2)
  
  colnames(emptyCol) <- c("totalVar","hellDist")
  
  paramMatrixNew <- cbind(paramMatrix,emptyCol)
  
  # pb <- utils::txtProgressBar(min = 0, max = n, initial = 1, style = 3, char = "=")
  
  # use the values from the single row
  
  for (i in 1:n) {
    
    dist <- CalculateDistances(fY=fY,pars=pars,m=paramMatrix[i,"m"],s=paramMatrix[i,"s"],
                               lambda=paramMatrix[i,"lambda"],sigma=paramMatrix[i,"sigma"],lb=lb,ub=ub,...)
    
    paramMatrixNew[i,"totalVar"] <- dist$totalVar
    
    paramMatrixNew[i,"hellDist"] <- dist$hellDist
    
    # utils::setTxtProgressBar(pb,i)
    
  }
  
  # close(pb)
  
  return(paramMatrixNew)
  
  
}



# function for calculation of the distances for the whole set of various parameters

CheckSetsParam <- function(n,fY,randomFY,paramFYList,paramGaList,print.out=TRUE,lambda0Lim=c(0.1,0.9),sigma0Lim=c(5,20),lb=0,ub=1,...)
{
  # find all possible combinations of the parameters
  
  paramMatrix <- expand.grid(c(paramFYList,paramGaList))
  
  colnames(paramMatrix) <- names(c(paramFYList,paramGaList))
  
  nParamMatrix <- nrow(paramMatrix)
  
  nParamFYList <- length(paramFYList)
  
  # find the distanes for the given set of the parameters
  
  for (i in 1:nParamMatrix) {
    
    cat("Simulation ", i, "/", nParamMatrix, "\n")
    
    # take parameters
    
    setParam <- paramMatrix[i,]
    
    # print(setParam)
    # 
    # print(setParam[1:nParamFYList])
    # 
    # print(is.list(setParam))
    # 
    # print(setParam[(nParamFYList+1):(nParamFYList+2)])
    
    # find approximations
    
    approxParam <- FindApproxParam(n=n,fY=fY,randomFY=randomFY,paramFY=unlist(setParam[1:nParamFYList]),
                                   paramGa=unlist(setParam[(nParamFYList+1):(nParamFYList+2)]),
                                   print.out=print.out,lambda0Lim=c(0.1,0.9),sigma0Lim=c(5,20),lb=lb,ub=ub,...)
    
    
    # find distances
    
    distMatrix <- CalculateDistancesMatrix(fY=fY,pars=unlist(setParam[1:nParamFYList]),paramMatrix=approxParam,lb=lb,ub=ub,...)
    
    # add columns with parameters
    
    newColumns <- matrix(data=rep(unlist(paramMatrix[i,]),n),nrow = n, byrow = TRUE)
    
    # print(newColumns)
    
    if(i==1) {
      
      output <- cbind(newColumns,distMatrix)
      
      colnames(output) <- c(colnames(paramMatrix),colnames(distMatrix))
      
    } else {
      
      output <- rbind(output,cbind(newColumns,distMatrix))
      
    }
    
    
  }
  
  
  
  
  
  
  return(output)
  
}


# simulations for beta distribution

betaDensity <- function(y,pars){
  
  alpha <- pars[1]
  
  beta <- pars[2]
  
  (y^(alpha - 1)) * ((1 - y)^(beta - 1)) / (gamma(alpha) * gamma(beta) / gamma(alpha + beta))
}


set.seed(1235678)

simBeta2 <- CheckSetsParam(n=500,fY=betaDensity,randomFY="rbeta",paramFYList=list(shape1=c(0.5,2,5),shape2=c(0.5,1,3)),
                           paramGaList=list(shape=c(15,30,45),rate=c(5,15,35)),print.out=FALSE,limit=0.1,
                           lambda0Lim=c(0.1,0.9),sigma0Lim=c(2,25))


saveRDS(simBeta2,"problem_3/simBeta2.rds")

boxplot(data.frame(TV=simBeta2[,"totalVar"],HD=simBeta2[,"hellDist"]))

boxplot(data.frame(TV=simBeta2[,"totalVar"],HD=simBeta2[,"hellDist"]),outline = FALSE)


# simulations for Kumaraswamy density

library(extraDistr)

KumaraswamyDensity <- function(y,pars){
  
  a <- pars[1]
  
  b <- pars[2]
  
  a*b*(y^(a - 1)) * ((1 - y)^(b - 1))
}




set.seed(123456)

simKumara2 <- CheckSetsParam(n=500,fY=KumaraswamyDensity,randomFY="rkumar",paramFYList=list(a=c(0.5,2,5),b=c(0.5,3,6)),
                             paramGaList=list(shape=c(15,30,45),rate=c(5,15,35)),print.out=FALSE,limit=0.1,
                             lambda0Lim=c(0.1,0.9),sigma0Lim=c(2,25))


saveRDS(simKumara2,"problem_3/simKumara2.rds")

boxplot(data.frame(TV=simKumara2[,"totalVar"],HD=simKumara2[,"hellDist"]))

boxplot(data.frame(TV=simKumara2[,"totalVar"],HD=simKumara2[,"hellDist"]),outline = FALSE)



# simulations for log-Bilal density

logBilalDensity <- function(y,pars){
  
  theta <- pars[1]
  
  6 / theta * y^(2/theta-1)*(1-y^(1/theta))
}


InverseLogBilalCDF <- function(x,theta)
{
  x <- as.complex(x)
  
  output <- 0.5 - (complex(real=1,imaginary = (-sqrt(3)))) / (4*(1-2*x+2*sqrt(x^2-x))^(1/3)) - 1/4*(complex(real=1,imaginary = (sqrt(3))))*(1-2*x+2*sqrt(x^2-x))^(1/3)
  
  output <- output^(theta)
  
  return(Re(output))
  
}




rLogBilal <- function(n, theta){
  
  u <- runif(n=n)
  
  x <- InverseLogBilalCDF(u,theta=theta)
  
}




set.seed(123456)

simLogBilal2 <- CheckSetsParam(n=500,fY=logBilalDensity,randomFY="rLogBilal",paramFYList=list(theta=c(0.3,0.5,1,1.5)),
                               paramGaList=list(shape=c(15,30,45),rate=c(5,15,35)),print.out=FALSE,limit=0.1)


saveRDS(simLogBilal2,"simLogBilal2.rds")


boxplot(data.frame(TV=simLogBilal2[,"totalVar"],HD=simLogBilal1[,"hellDist"]))


# simulations for logit-normal

logitNorm <- function(y,pars){
  
  muy <- pars[1]
  
  phiy <- pars[2]
  
  (1/(phiy*sqrt(2*pi)))*(1/(y*(1-y)))*exp(-(log(y/(1-y))-muy)^2/(2*phiy^2))
}



simLogitNorm3 <- CheckSetsParam(n=100,fY=logitNorm,randomFY="rlogitnorm",paramFYList=list(mu=c(-1.85,0,1.85),sigma=c(1,2,3.5)),
                                paramGaList=list(shape=c(15,30,45),rate=c(5,15,35)),print.out=FALSE,limit=0.1,
                                lambda0Lim=c(0.1,0.9),sigma0Lim=c(2,25))


saveRDS(simLogitNorm3,"problem_3/simLogitNorm3.rds")


# simulations for truncated normal

truncatedNormalDensity <- function(y,pars)
{
  
  1/(sqrt(2*pi)*pars[4])*exp(-(y-pars[3])^2/(2*pars[4]^2))/(pnorm(q=pars[2],mean = pars[3],sd=pars[4])-pnorm(q=pars[1],mean = pars[3],sd=pars[4]))
  
}

library(truncnorm)



set.seed(12345689)

simTruncNorm3 <- CheckSetsParam(n=500,fY=truncatedNormalDensity,randomFY="rtruncnorm",paramFYList=list(a=0,b=1,mean=c(0.2,0.3,0.5),sd=c(0.1,0.17,0.2)),
                                paramGaList=list(shape=c(15,30,45),rate=c(5,15,35)),print.out=FALSE,limit=0.05,lb=0,ub=1)


saveRDS(simTruncNorm3,"problem_3/simTruncNorm3.rds")


## Figure 3
set.seed(121)
iid1 <- sample(1:NROW(simLogitNorm1),size = 18000)
iid2 <- sample(1:NROW(simBeta2),size = 18000)
iid3 <- sample(1:NROW(simKumara2),size = 18000)
iid4 <- sample(1:NROW(simLogBilal2),size = 18000)
iid5 <- sample(1:NROW(simTruncNorm3),size = 18000)
X <- cbind(simLogitNorm1[iid1,"totalVar"],simBeta2[iid2,"totalVar"],simKumara2[iid3,"totalVar"],simLogBilal2[iid4,"totalVar"],simTruncNorm3[iid5,"totalVar"])
Z <- cbind(simLogitNorm1[iid1,"hellDist"],simBeta2[iid2,"hellDist"],simKumara2[iid3,"hellDist"],simLogBilal2[iid4,"hellDist"],simTruncNorm3[iid5,"hellDist"])

cols = c("orangered3","orchid4","palegreen4","peru","darkorange4")
tikzDevice::tikz(file='/home/antonio/MEGA/Lavoro_sync/My papers/Submitted/cartella senza nome/IJAR/fig9.tex',width=7,height=6.5,sanitize = TRUE)
par(mfcol=c(2,1),mar = c(2, 2, 2, 2)) 
boxplot(X,outline=FALSE,frame=FALSE,ylim=c(0,0.1),names=c("LogitNorm","Beta","Kumaraswamy","LogBilal","Normal"),col="gray84",border="#3771A6"); title("(A) TV",adj=0,line=0)
boxplot(Z,outline=FALSE,frame=FALSE,ylim=c(0,0.2),names=c("LogitNorm","Beta","Kumaraswamy","LogBilal","Normal"),col="gray84",border="#3771A6"); title("(B) HD",adj=0,line=0)
dev.off()


